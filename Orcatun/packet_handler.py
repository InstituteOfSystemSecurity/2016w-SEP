#!/usr/bin/python2.7import dpktimport otimport socketimport logging### @author Johannes Heidtmann# @brief This class provides static methods to convert between IP packets and OrcaTUN packets# @details TODOclass PacketHandler(object):    ##    # Construct OrcaTUN packet from IP packet    # @param packet IP packet buffer    @staticmethod    def to_ot(ip_packet):        try:            # Parse provided IP packet buffer            ip_packet = dpkt.ip.IP(ip_packet)            # Create OT packet with parsed values of IP packet            ot_packet = ot.OT(id=ip_packet.id,                              off=ip_packet.off,                              p=ip_packet.p,                              data=ip_packet.data)            return ot_packet        except dpkt.Error:            log = logging.getLogger("master.packet_handler")            log.info("Outgoing packet dropped (Invalid IP packet)")    ##    # Construct IP packet from OrcaTUN packet    # @param ot_packet OT packet buffer    # @param addr adress value of returned IP packet    # @param dstaddr destination address value of returned IP packet    @staticmethod    def to_ip(ot_packet, addr, dstaddr):        # Convert provided adresses to a binary representation        src = socket.inet_aton(addr)        dst = socket.inet_aton(dstaddr)        try:            # Parse provided OT packet buffer            ot_packet = ot.OT(ot_packet)            # Create IP packet with parsed values of OT packet            ip__packet = dpkt.ip.IP(id=ot_packet.id,                                    off=ot_packet.off,                                    p=ot_packet.p,                                    src=src,                                    dst=dst,                                    data=ot_packet.data)            return ip__packet        except dpkt.Error:            log = logging.getLogger("master.packet_handler")            log.info("Incoming packet dropped (Invalid OT packet)")    ##    # Print packet information (IP/OT format)    # @param packet packet to print    @staticmethod    def show(packet):        # Calculate fragmentation fields from flag byte        do_not_fragment = bool(packet.off & dpkt.ip.IP_DF)        more_fragments = bool(packet.off & dpkt.ip.IP_MF)        fragment_offset = packet.off & dpkt.ip.IP_OFFMASK        p = packet.p        id = packet.id        if type(packet) is dpkt.ip.IP:            ip_src = socket.inet_ntop(socket.AF_INET, packet.src)            ip_dst = socket.inet_ntop(socket.AF_INET, packet.dst)            # Print out the info            return 'IP: %s -> %s\t(len=%d, ttl=%d, DF=%d, MF=%d, offset=%d, p=%d, id=%d)' % \                   (ip_src, ip_dst, packet.len, packet.ttl, do_not_fragment, more_fragments, fragment_offset, p, id)        elif type(packet) is ot.OT:            return 'OT: (len=%d, DF=%d, MF=%d, offset=%d, p=%d, id=%d)' % \                   (len(packet), do_not_fragment, more_fragments, fragment_offset, packet.p, packet.id)        else:            log = logging.getLogger("master.packet_handler")            log.info("Invalid object type provided to tun_handler.show(packet)")